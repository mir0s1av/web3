/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace CrowdFundingFactory {
  export type CampaignStruct = {
    campaignAddress: AddressLike;
    owner: AddressLike;
    name: string;
    createdAt: BigNumberish;
  };

  export type CampaignStructOutput = [
    campaignAddress: string,
    owner: string,
    name: string,
    createdAt: bigint
  ] & {
    campaignAddress: string;
    owner: string;
    name: string;
    createdAt: bigint;
  };
}

export interface CrowdFundingFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "campaigns"
      | "createCampaign"
      | "getAllCampaigns"
      | "getCampaignsOfUser"
      | "isPaused"
      | "owner"
      | "pauseAndResumeCampaing"
      | "userCampaigns"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsOfUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAndResumeCampaing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userCampaigns",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsOfUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseAndResumeCampaing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCampaigns",
    data: BytesLike
  ): Result;
}

export interface CrowdFundingFactory extends BaseContract {
  connect(runner?: ContractRunner | null): CrowdFundingFactory;
  waitForDeployment(): Promise<this>;

  interface: CrowdFundingFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        campaignAddress: string;
        owner: string;
        name: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  createCampaign: TypedContractMethod<
    [
      _name: string,
      _durationInDays: BigNumberish,
      _goal: BigNumberish,
      _description: string
    ],
    [void],
    "nonpayable"
  >;

  getAllCampaigns: TypedContractMethod<
    [],
    [CrowdFundingFactory.CampaignStructOutput[]],
    "view"
  >;

  getCampaignsOfUser: TypedContractMethod<
    [campaignOwenerAddress: AddressLike],
    [CrowdFundingFactory.CampaignStructOutput[]],
    "view"
  >;

  isPaused: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pauseAndResumeCampaing: TypedContractMethod<[], [void], "nonpayable">;

  userCampaigns: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        campaignAddress: string;
        owner: string;
        name: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint] & {
        campaignAddress: string;
        owner: string;
        name: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _name: string,
      _durationInDays: BigNumberish,
      _goal: BigNumberish,
      _description: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllCampaigns"
  ): TypedContractMethod<
    [],
    [CrowdFundingFactory.CampaignStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignsOfUser"
  ): TypedContractMethod<
    [campaignOwenerAddress: AddressLike],
    [CrowdFundingFactory.CampaignStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPaused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pauseAndResumeCampaing"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userCampaigns"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        campaignAddress: string;
        owner: string;
        name: string;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
